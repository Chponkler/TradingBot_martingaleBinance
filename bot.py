import os
import time
import decimal
from binance import Client
from binance.exceptions import BinanceAPIException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = os.getenv('BINANCE_API_KEY')
API_SECRET = os.getenv('BINANCE_API_SECRET')
SYMBOL = 'XRPUSDT'
COMMISSION = decimal.Decimal('0.001')  # 0.1% –∫–æ–º–∏—Å—Å–∏—è Binance

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
START_PRICE = decimal.Decimal('2.315')
DECLINE_PERCENT = decimal.Decimal('0.5')
INITIAL_AMOUNT = decimal.Decimal('0.5')
MULTIPLIER = decimal.Decimal('1.4')
MAX_STEPS = 10
PROFIT_PERCENT = decimal.Decimal('2')

client = Client(API_KEY, API_SECRET, testnet=True)

class TradingBot:
    def __init__(self):
        self.entry_price = None
        self.current_step = 0
        self.total_quantity = decimal.Decimal('0')
        self.total_spent = decimal.Decimal('0')
        self.next_buy_amount = INITIAL_AMOUNT
        self.required_balance = self.calculate_required_balance()
        self.active_orders = []

    def calculate_required_balance(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –±–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π"""
        total = decimal.Decimal('0')
        current_amount = INITIAL_AMOUNT

        for _ in range(MAX_STEPS):
            total += current_amount * (1 + COMMISSION)
            current_amount *= MULTIPLIER

        return total.quantize(decimal.Decimal('0.00'))

    def get_usdt_balance(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT"""
        try:
            balance = client.get_asset_balance(asset='USDT')
            return decimal.Decimal(balance['free'])
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e.message}")
            return decimal.Decimal('0')

    def confirm_start(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
        print("\n" + "="*50)
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        print(f"‚Ä¢ –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {START_PRICE} USDT")
        print(f"‚Ä¢ –®–∞–≥–æ–≤ DCA: {MAX_STEPS}")
        print(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {INITIAL_AMOUNT} USDT")
        print(f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–∞: {MULTIPLIER}")
        print(f"‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {PROFIT_PERCENT}%")
        print(f"‚Ä¢ –¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {self.required_balance} USDT (—Å –∫–æ–º–∏—Å—Å–∏–µ–π {COMMISSION*100}%)")

        balance = self.get_usdt_balance()
        print(f"\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} USDT")

        if balance < self.required_balance:
            print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ {self.required_balance - balance:.2f} USDT")

        choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? (yes/no): ").strip().lower()
        if choice != 'yes':
            print("–û—Ç–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞...")
            exit()
        print("="*50 + "\n")

    def get_current_price(self):
        """–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ XRP"""
        try:
            ticker = client.get_symbol_ticker(symbol=SYMBOL)
            return decimal.Decimal(ticker['price'])
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e.message}")
            return None

    def wait_for_start_price(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã"""
        print(f"üïí –û–∂–∏–¥–∞–µ–º —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {START_PRICE} USDT")
        while True:
            price = self.get_current_price()
            print(f" –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {price} USDT")
            if True:     #price and price == START_PRICE:
                print(f"‚úÖ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ {price}, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞!")
                self.entry_price = price
                return
            time.sleep(1)

    def calculate_target_price(self, step):
        """–¶–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—É–ø–µ–Ω–∏"""
        return self.entry_price * (1 - DECLINE_PERCENT/100 * (step + 1))

    def buy_xrp(self, amount):
        """–ü–æ–∫—É–ø–∫–∞ XRP –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É"""
        try:
            price = self.get_current_price()
            if not price:
                return False

            print(f"\nüõí –ü–æ–∫—É–ø–∞–µ–º {amount} USDT XRP –ø–æ —Ü–µ–Ω–µ {price:.4f}")
            quantity = round(amount / price, 4)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            commission = quantity * COMMISSION
            total_quantity = quantity - commission

            order = client.create_order(
                symbol=SYMBOL,
                side=Client.SIDE_BUY,
                type=Client.ORDER_TYPE_MARKET,
                quantity=quantity
            )

            executed_qty = decimal.Decimal(order['executedQty'])
            self.total_quantity += executed_qty - commission
            self.total_spent += amount

            print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {executed_qty:.2f} XRP –∑–∞ {amount:.2f} USDT")
            print(f"üí∏ –£–¥–µ—Ä–∂–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏: {commission:.4f} XRP")
            return True

        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e.message}")
            return False

    def sell_all_xrp(self):
        """–ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–æ XRP"""
        try:
            balance = client.get_asset_balance(asset='XRP')
            free = decimal.Decimal(balance['free'])
            if free <= decimal.Decimal('0.0001'):
                return

            print(f"\nüí∞ –ü—Ä–æ–¥–∞–µ–º {free:.2f} XRP...")
            order = client.create_order(
                symbol=SYMBOL,
                side=Client.SIDE_SELL,
                type=Client.ORDER_TYPE_MARKET,
                quantity=free
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            executed_qty = decimal.Decimal(order['executedQty'])
            commission = executed_qty * COMMISSION
            received = executed_qty - commission

            print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {received:.2f} USDT")
            print(f"üí∏ –£–¥–µ—Ä–∂–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏: {commission:.4f} XRP")
            self.reset()

        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e.message}")

    def check_profit_condition(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏"""
        if self.total_quantity == 0:
            return False

        avg_price = self.total_spent / self.total_quantity
        current_price = self.get_current_price()
        if not current_price:
            return False

        target_price = avg_price * (1 + PROFIT_PERCENT/100)
        return current_price >= target_price

    def reset(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        self.__init__()
        print("\n‚ôªÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

    def run(self):
        self.confirm_start()
        self.wait_for_start_price()

        while self.current_step < MAX_STEPS:
            current_price = self.get_current_price()
            if not current_price:
                time.sleep(3)
                continue

            target_price = self.calculate_target_price(self.current_step)

            print(f"\n–®–∞–≥ {self.current_step + 1}/{MAX_STEPS}")
            print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f}")
            print(f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {target_price:.4f}")
            print(f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {self.next_buy_amount:.2f} USDT")
            print(f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {self.total_spent:.2f} USDT")
            print(f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ XRP: {self.total_quantity:.2f}")

            if current_price <= target_price:
                if self.buy_xrp(self.next_buy_amount):
                    self.next_buy_amount *= MULTIPLIER
                    self.current_step += 1

                    if self.check_profit_condition():
                        print(f"\nüéØ –£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!")
                        self.sell_all_xrp()
                        return

            time.sleep(3)

        print("\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤. –û–∂–∏–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
        while True:
            if self.check_profit_condition():
                self.sell_all_xrp()
                break
            time.sleep(3)

if __name__ == "__main__":
    bot = TradingBot()
    while True:
        try:
            bot.run()
            print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            time.sleep(5)
        except KeyboardInterrupt:
            choice = input("–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º? (yes/no): ")
            if choice.lower() == 'yes':
                bot.sell_all_xrp()
                break
            else:
                break
