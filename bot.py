import os
import time
import decimal
from binance import Client
from binance.exceptions import BinanceAPIException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = os.getenv('BINANCE_API_KEY')
API_SECRET = os.getenv('BINANCE_API_SECRET')
SYMBOL = 'XRPUSDT'
COMMISSION = decimal.Decimal('0.001')  # 0.1% –∫–æ–º–∏—Å—Å–∏—è Binance

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
START_PRICE = decimal.Decimal('2.2857')  # –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞
DECLINE_PERCENT = decimal.Decimal('0.2')  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5% –æ—Ç entry_price)
INITIAL_AMOUNT = decimal.Decimal('10')  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –≤ USDT (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 10 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è MIN_NOTIONAL)
MULTIPLIER = decimal.Decimal('1.3')  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
MAX_STEPS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)
PROFIT_PERCENT = decimal.Decimal('0.5')  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
client = Client(API_KEY, API_SECRET, testnet=True)

class TradingBot:
    def __init__(self):
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        self.entry_price = None  # –¶–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (START_PRICE –∏–ª–∏ –Ω–∏–∂–µ)
        self.current_step = 0  # –¢–µ–∫—É—â–∏–π —à–∞–≥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ DCA, 1 –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç.–¥.)
        self.total_quantity = decimal.Decimal('0')  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö XRP
        self.total_spent = decimal.Decimal('0')  # –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö USDT
        self.next_buy_amount = INITIAL_AMOUNT  # –°—É–º–º–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
        self.symbol_info = self._get_symbol_info() # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ—á–Ω–æ—Å—Ç—å)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞
        if not self.symbol_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SYMBOL –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.")
            exit()

        self.required_balance = self._calculate_required_balance()
        self.active_orders = [] # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞

    def _get_symbol_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ (XRPUSDT) —Å Binance."""
        try:
            exchange_info = client.get_exchange_info()
            for s in exchange_info['symbols']:
                if s['symbol'] == SYMBOL:
                    info = {
                        'minQty': decimal.Decimal('0'),
                        'stepSize': decimal.Decimal('0'),
                        'minNotional': decimal.Decimal('0')
                    }
                    for f in s['filters']:
                        if f['filterType'] == 'LOT_SIZE':
                            info['minQty'] = decimal.Decimal(f['minQty'])
                            info['stepSize'] = decimal.Decimal(f['stepSize'])
                        elif f['filterType'] == 'MIN_NOTIONAL':
                            info['minNotional'] = decimal.Decimal(f['minNotional'])
                    return info
            return None
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e.message}")
            return None

    def _quantize_quantity(self, quantity):
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ Binance."""
        if not self.symbol_info:
            return quantity # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ, –µ—Å–ª–∏ –∏–Ω—Ñ–æ –Ω–µ—Ç (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –ø–æ–∑–∂–µ)
        step_size = self.symbol_info['stepSize']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º quantize –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —à–∞–≥—É
        return (quantity / step_size).quantize(decimal.Decimal('1.'), rounding=decimal.ROUND_DOWN) * step_size

    def _calculate_required_balance(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π."""
        total = INITIAL_AMOUNT * (1 + COMMISSION) # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        current_amount = INITIAL_AMOUNT

        for _ in range(MAX_STEPS): # –î–æ–±–∞–≤–ª—è–µ–º MAX_STEPS DCA –ø–æ–∫—É–ø–æ–∫
            current_amount *= MULTIPLIER
            total += current_amount * (1 + COMMISSION)

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return total.quantize(decimal.Decimal('0.00'))

    def get_usdt_balance(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT."""
        try:
            balance = client.get_asset_balance(asset='USDT')
            return decimal.Decimal(balance['free'])
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e.message}")
            return decimal.Decimal('0')

    def get_xrp_balance(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å XRP."""
        try:
            balance = client.get_asset_balance(asset='XRP')
            return decimal.Decimal(balance['free'])
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ XRP: {e.message}")
            return decimal.Decimal('0')

    def confirm_start(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞."""
        print("\n" + "="*50)
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        print(f"‚Ä¢ –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {SYMBOL}")
        print(f"‚Ä¢ –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {START_PRICE} USDT")
        print(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {DECLINE_PERCENT}%")
        print(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {INITIAL_AMOUNT} USDT")
        print(f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏: {MULTIPLIER}")
        print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {MAX_STEPS}")
        print(f"‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {PROFIT_PERCENT}%")
        print(f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è Binance: {COMMISSION*100}%")
        print(f"‚Ä¢ –¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤: {self.required_balance} USDT")

        balance = self.get_usdt_balance()
        print(f"\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} USDT")

        if balance < self.required_balance:
            print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤!")
            print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ {self.required_balance - balance:.2f} USDT")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤ –∏–ª–∏ –≤—ã–π—Ç–∏

        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        if INITIAL_AMOUNT < self.symbol_info['minNotional']:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ ({INITIAL_AMOUNT:.2f} USDT) –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞ Binance ({self.symbol_info['minNotional']:.2f} USDT).")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–µ–ª–∏—á—å—Ç–µ INITIAL_AMOUNT –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.")
            exit()

        choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? (yes/no): ").strip().lower()
        if choice != 'yes':
            print("–û—Ç–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞...")
            exit()
        print("="*50 + "\n")

    def get_current_price(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É XRP."""
        try:
            ticker = client.get_symbol_ticker(symbol=SYMBOL)
            return decimal.Decimal(ticker['price'])
        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e.message}")
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return None

    def wait_for_start_price(self):
        """–û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∏–ª–∏ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ START_PRICE."""
        print(f"üïí –û–∂–∏–¥–∞–µ–º —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {START_PRICE} USDT...")
        while True:
            price = self.get_current_price()
            if price is None:
                time.sleep(3) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue

            print(f" –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.4f} USDT")
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∏–ª–∏ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ START_PRICE
            if price <= START_PRICE:
                print(f"‚úÖ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ {price:.4f} USDT, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞!")
                self.entry_price = price # –§–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–∫ entry_price
                return
            time.sleep(3) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

    def calculate_target_price(self, step):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è.
        'step' –∑–¥–µ—Å—å - —ç—Ç–æ 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ, 1 –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç.–¥.).
        """
        # –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ - —ç—Ç–æ entry_price, —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –Ω–∞ DECLINE_PERCENT –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è step=0 (–ø–µ—Ä–≤–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ) –ø–∞–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ 1 * DECLINE_PERCENT
        # –î–ª—è step=1 (–≤—Ç–æ—Ä–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ) –ø–∞–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ 2 * DECLINE_PERCENT
        return self.entry_price * (1 - DECLINE_PERCENT/decimal.Decimal('100') * (step + 1))

    def buy_xrp(self, amount_usdt):
        """–ü–æ–∫—É–ø–∞–µ—Ç XRP –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT."""
        try:
            current_price = self.get_current_price()
            if not current_price:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ (MIN_NOTIONAL)
            if amount_usdt < self.symbol_info['minNotional']:
                print(f"‚ö†Ô∏è –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount_usdt:.2f} USDT –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {self.symbol_info['minNotional']:.2f} USDT. –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏.")
                return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ä–¥–µ—Ä

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XRP –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            quantity_raw = amount_usdt / current_price
            quantity_to_buy = self._quantize_quantity(quantity_raw)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if quantity_to_buy < self.symbol_info['minQty']:
                print(f"‚ö†Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity_to_buy:.4f} XRP –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {self.symbol_info['minQty']:.4f} XRP. –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏.")
                return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False

            print(f"\nüõí –ü–æ–∫—É–ø–∞–µ–º {quantity_to_buy:.4f} XRP –Ω–∞ —Å—É–º–º—É {amount_usdt:.2f} USDT –ø–æ —Ü–µ–Ω–µ {current_price:.4f}")

            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            order = client.create_order(
                symbol=SYMBOL,
                side=Client.SIDE_BUY,
                type=Client.ORDER_TYPE_MARKET,
                quantity=quantity_to_buy # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ä–¥–µ—Ä–∞
            executed_qty = decimal.Decimal(order['executedQty'])
            cummulative_quote_qty = decimal.Decimal(order['cummulativeQuoteQty']) # –û–±—â–∞—è —Å—É–º–º–∞ –≤ USDT, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é

            # –ö–æ–º–∏—Å—Å–∏—è –≤ XRP (–¥–ª—è –ø–æ–∫—É–ø–∫–∏ XRP/USDT, –∫–æ–º–∏—Å—Å–∏—è –æ–±—ã—á–Ω–æ –≤ XRP)
            commission_xrp = executed_qty * COMMISSION
            net_received_xrp = executed_qty - commission_xrp

            self.total_quantity += net_received_xrp
            self.total_spent += cummulative_quote_qty # –û–±—â–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤ USDT

            print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {net_received_xrp:.4f} XRP –∑–∞ {cummulative_quote_qty:.2f} USDT")
            print(f"üí∏ –£–¥–µ—Ä–∂–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏: {commission_xrp:.4f} XRP")
            return True

        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e.message} (–ö–æ–¥: {e.code})")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
            if e.code == -2010: # –ö–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
                print("üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDT –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
            return False

    def sell_all_xrp(self):
        """–ü—Ä–æ–¥–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ XRP –Ω–∞ –±–∞–ª–∞–Ω—Å–µ."""
        try:
            free_xrp = self.get_xrp_balance()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            if free_xrp <= self.symbol_info['minQty']:
                print(f"‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ XRP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ({free_xrp:.4f} <= {self.symbol_info['minQty']:.4f}).")
                self.reset_state() # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                return

            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XRP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            quantity_to_sell = self._quantize_quantity(free_xrp)

            print(f"\nüí∞ –ü—Ä–æ–¥–∞–µ–º {quantity_to_sell:.4f} XRP...")
            order = client.create_order(
                symbol=SYMBOL,
                side=Client.SIDE_SELL,
                type=Client.ORDER_TYPE_MARKET,
                quantity=quantity_to_sell
            )

            executed_qty = decimal.Decimal(order['executedQty'])
            cummulative_quote_qty = decimal.Decimal(order['cummulativeQuoteQty']) # –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT

            # –ö–æ–º–∏—Å—Å–∏—è –≤ USDT (–¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ XRP/USDT, –∫–æ–º–∏—Å—Å–∏—è –æ–±—ã—á–Ω–æ –≤ USDT)
            commission_usdt = cummulative_quote_qty * COMMISSION
            net_received_usdt = cummulative_quote_qty - commission_usdt

            print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {executed_qty:.4f} XRP, –ø–æ–ª—É—á–µ–Ω–æ {net_received_usdt:.2f} USDT")
            print(f"ÔøΩ –£–¥–µ—Ä–∂–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏: {commission_usdt:.4f} USDT")
            self.reset_state() # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏

        except BinanceAPIException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e.message} (–ö–æ–¥: {e.code})")
            return
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return

    def check_profit_condition(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏."""
        if self.total_quantity == 0:
            return False # –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏

        avg_price = self.total_spent / self.total_quantity
        current_price = self.get_current_price()
        if not current_price:
            return False

        # –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ + PROFIT_PERCENT
        target_sell_price = avg_price * (1 + PROFIT_PERCENT/decimal.Decimal('100'))
        
        print(f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {avg_price:.4f} USDT")
        print(f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {target_sell_price:.4f} USDT")
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USDT")

        return current_price >= target_sell_price

    def reset_state(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        self.entry_price = None
        self.current_step = 0
        self.total_quantity = decimal.Decimal('0')
        self.total_spent = decimal.Decimal('0')
        self.next_buy_amount = INITIAL_AMOUNT
        print("\n‚ôªÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        # wait_for_start_price() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        # self.entry_price —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

        # --- –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É –ø–æ —Ü–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ---
        print(f"\n--- –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É (–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥) ---")
        current_price = self.get_current_price()
        if current_price is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
            self.reset_state() # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            return

        # –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—É–º–º—É INITIAL_AMOUNT
        print(f"üõí –ü–æ–∫—É–ø–∞–µ–º {INITIAL_AMOUNT:.2f} USDT XRP –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ {current_price:.4f}")
        if self.buy_xrp(INITIAL_AMOUNT):
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_buy_amount –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ DCA
            self.next_buy_amount = INITIAL_AMOUNT * MULTIPLIER
            self.current_step = 0 # –≠—Ç–æ 0-–π —à–∞–≥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
            if self.check_profit_condition():
                print(f"\nüéØ –£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏! –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ XRP.")
                self.sell_all_xrp()
                return
        else:
            print("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
            self.reset_state()
            return # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç

        # --- –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å MAX_STEPS —à–∞–≥–∞–º–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ---
        # –¶–∏–∫–ª —Ç–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç current_step 0 –¥–æ MAX_STEPS-1,
        # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è 1-—é, 2-—é, ..., MAX_STEPS-—é –ø–æ–∫—É–ø–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è.
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –±—É–¥–µ—Ç 1 (–Ω–∞—á–∞–ª—å–Ω–∞—è) + MAX_STEPS (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ).
        while self.current_step < MAX_STEPS:
            current_price = self.get_current_price()
            if current_price is None:
                time.sleep(3)
                continue

            # calculate_target_price(self.current_step) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç
            # —Ü–µ–ª—å –¥–ª—è 1-–≥–æ –ø–∞–¥–µ–Ω–∏—è (–∫–æ–≥–¥–∞ self.current_step=0), 2-–≥–æ –ø–∞–¥–µ–Ω–∏—è (self.current_step=1) –∏ —Ç.–¥.
            target_buy_price = self.calculate_target_price(self.current_step)

            print(f"\n--- –®–∞–≥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è {self.current_step + 1}/{MAX_STEPS} ---")
            print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USDT")
            print(f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {target_buy_price:.4f} USDT (–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ {DECLINE_PERCENT * (self.current_step + 1)}% –æ—Ç {self.entry_price:.4f})")
            print(f"–°—É–º–º–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏: {self.next_buy_amount:.2f} USDT")
            print(f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {self.total_spent:.2f} USDT")
            print(f"–í—Å–µ–≥–æ XRP: {self.total_quantity:.4f}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
            if self.total_quantity > 0:
                avg_price = self.total_spent / self.total_quantity
                target_sell_price_for_display = avg_price * (1 + PROFIT_PERCENT/decimal.Decimal('100'))
                print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫: {avg_price:.4f} USDT")
                print(f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {target_sell_price_for_display:.4f} USDT")
            else:
                print("üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–æ–∫: –ü–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö XRP.")
                print("üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: N/A")


            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            if current_price <= target_buy_price:
                print(f"‚úÖ –¶–µ–Ω–∞ {current_price:.4f} –¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π {target_buy_price:.4f}. –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ä–µ–¥–Ω—è—é—â—É—é –ø–æ–∫—É–ø–∫—É!")
                if self.buy_xrp(self.next_buy_amount):
                    self.next_buy_amount *= MULTIPLIER
                    self.current_step += 1
                    # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏
                    if self.check_profit_condition():
                        print(f"\nüéØ –£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ! –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ XRP.")
                        self.sell_all_xrp()
                        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª run(), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
                else:
                    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥ –∏ –Ω–µ –º–µ–Ω—è–µ–º —Å—É–º–º—É
                    print("‚ö†Ô∏è –£—Å—Ä–µ–¥–Ω—è—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ.")
            else:
                print(f"–û–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–æ {target_buy_price:.4f} USDT –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è...")

            time.sleep(3) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–Ω—ã

        print("\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è. –û–∂–∏–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
        # –ï—Å–ª–∏ –≤—Å–µ —à–∞–≥–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –±–æ—Ç –∂–¥–µ—Ç —Ç–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        while True:
            if self.check_profit_condition():
                print(f"\nüéØ –£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–±—ã–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ! –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ XRP.")
                self.sell_all_xrp()
                break # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
            time.sleep(5) # –ñ–¥–µ–º –¥–æ–ª—å—à–µ, –µ—Å–ª–∏ –≤—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

if __name__ == "__main__":
    bot = TradingBot()
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
    bot.confirm_start()
    bot.wait_for_start_price() # –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
    while True:
        try:
            bot.run()
            print("\nüîÑ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        except KeyboardInterrupt:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è Ctrl+C
            choice = input("\n–í—ã—Ö–æ–¥. –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º? (yes/no): ").strip().lower()
            if choice == 'yes':
                bot.sell_all_xrp()
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")
            break
            else:
                break
        except Exception as e:
            print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
